
============================================================
M√©mo SQL - Projet NumCity
============================================================

Objectifs :
-----------
- Se familiariser avec les requ√™tes SQL de base.
- Savoir ins√©rer, mettre √† jour, supprimer et interroger des donn√©es.
- Comprendre les jointures et fonctions d‚Äôagr√©gation.
- Ma√Ætriser le scripting SQL pour exploiter une base relationnelle.

------------------------------------------------------------
1. INSERT (Ajout de donn√©es)
------------------------------------------------------------
Syntaxe :
INSERT INTO nom_table (col1, col2, ...) VALUES (val1, val2, ...);

Insertion multiple :
INSERT INTO nom_table (col1, col2) VALUES
(val1, val2),
(val3, val4);

Valeur par d√©faut :
INSERT INTO table (col1, col2) VALUES (DEFAULT, val2);

Exercice :
- Tester INSERT avec des donn√©es compl√®tes et incompl√®tes.
- Ex. utilisateurs avec ou sans email.
- V√©rifier les contraintes (NOT NULL, DEFAULT).

------------------------------------------------------------
2. UPDATE (Modification de donn√©es)
------------------------------------------------------------
Syntaxe :
UPDATE nom_table SET col1 = val1 WHERE condition;

Exemples :
UPDATE Stations SET nombre_places = 25 WHERE nom = 'Station Centre';
UPDATE Stations SET type_station = 'parking' WHERE id_station = 2;

Exercice :
- Modifier un lieu (ex : coordonn√©es ou type).
- Mettre √† jour plusieurs colonnes avec une seule requ√™te.
- Expliquer pourquoi la modification a du sens.

------------------------------------------------------------
3. DELETE (Suppression de donn√©es)
------------------------------------------------------------
Syntaxe :
DELETE FROM nom_table WHERE condition;

Option avanc√©e (PostgreSQL) :
DELETE FROM table WHERE condition RETURNING *;

Exercice :
- Supprimer un lieu ou un utilisateur inactif.
- S'assurer que les relations sont respect√©es.
- Utiliser RETURNING si possible pour valider la suppression.

------------------------------------------------------------
4. SELECT (Interrogation des donn√©es)
------------------------------------------------------------
Syntaxe :
SELECT colonne1, colonne2 FROM table WHERE condition;

Options :
- SELECT * : toutes les colonnes
- Fonctions : COUNT(), AVG(), MAX(), MIN()
- Aliases : SELECT col AS "Nom" ...
- ORDER BY, GROUP BY, LIMIT

Exemples :
SELECT * FROM Stations;
SELECT nom FROM Stations WHERE type_station = 'recharge' AND nombre_places > 10;

Exercice :
- Afficher les lieux √† faible capacit√© (< 5).
- Lieux propos√©s par un utilisateur sp√©cifique.

------------------------------------------------------------
5. JOIN (Jointures entre tables)
------------------------------------------------------------
Syntaxe :
SELECT A.col1, B.col2 FROM A
JOIN B ON A.id = B.id;

Exemple :
SELECT u.nom, l.type_lieu FROM lieu l
JOIN utilisateur u ON l.propose_par = u.id_utilisateur;

Exercice :
- Trouver les utilisateurs ayant propos√© un lieu.
- Associer lieu, zone et √©quipements via jointure.

------------------------------------------------------------
6. GROUP BY et Agr√©gations
------------------------------------------------------------
Syntaxe :
SELECT col, COUNT(*) FROM table GROUP BY col;

Exemples :
SELECT type_lieu, COUNT(*) AS nb FROM lieu GROUP BY type_lieu;
SELECT propose_par, COUNT(*) FROM lieu GROUP BY propose_par;

Exercice :
- Nombre de lieux par utilisateur.
- Moyenne ou total de lieux par type ou zone.

------------------------------------------------------------
Conseils :
------------------------------------------------------------
‚úî Toujours tester les requ√™tes avec une condition (WHERE)
‚úî Sauvegarder r√©guli√®rement la base avant des DELETE / UPDATE
‚úî Utiliser des vues ou des sous-requ√™tes pour simplifier
‚úî Nommer les colonnes avec des alias pour la lisibilit√©

Fin du m√©mo - Que la Force du SQL soit avec toi, citoyen de NumCity üöÄ
